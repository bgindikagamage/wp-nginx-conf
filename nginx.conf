user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 8000;
	multi_accept on;
}

http {

	# HTTP
	# Speed up file transfer by using sendfile().
	sendfile on;

	# Don't send partial frames, which increases throughput.
	tcp_nopush on;

	# Don't wait to send data in keep-alive state.
	tcp_nodelay on;

	# MIME Types
	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;

	# Limit Request
	limit_req_status 403;
	limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

	# Don't send the nginx version number in error pages and Server header
	server_tokens off;

	# Limits & Timeouts
	# Allow the server to close connection on non responding client, this will free up memory
	reset_timedout_connection on;

	# How long each connection should stay open for.
	keepalive_timeout 15;

	# Timeout for reading client request body.
	client_body_timeout 30;

	# Timeout for reading client request header.
	client_header_timeout 30;

	# Timeout for transmitting reponse to client.
	send_timeout 30;

	# Set the maximum allowed size of client request body. This should be set
	# to the value of files sizes you wish to upload to the WordPress Media Library.
	# You may also need to change the values `upload_max_filesize` and `post_max_size` within
	# your php.ini for the changes to apply.
	client_max_body_size 64m;

	fastcgi_read_timeout 300;

    	# Cache Settings
    
	# FastCGI cache settings
	fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=WORDPRESS:50m inactive=60m;
	fastcgi_cache_key "$scheme$request_method$host$request_uri";
	fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_503;
	fastcgi_cache_valid 200 301 302 404 1h;
	fastcgi_buffers 16 16k;
	fastcgi_buffer_size 32k;
	fastcgi_param SERVER_NAME $http_host;
	fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
	fastcgi_keep_conn on;
	add_header Fastcgi-Cache $upstream_cache_status;

	# SSL Settings
	ssl_session_cache shared:SSL:20m;
	ssl_session_timeout 10m;
	ssl_prefer_server_ciphers on;
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

	# Security
	add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
	# add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;
	add_header X-Xss-Protection "1; mode=block" always;
	add_header X-Frame-Options "SAMEORIGIN" always;
	add_header X-Content-Type-Options "nosniff" always;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		      '$status $body_bytes_sent "$http_referer" '
		      '"$http_user_agent" "$http_x_forwarded_for"';

	# Default Logs
	error_log /var/log/nginx/error.log warn;
	access_log /var/log/nginx/access.log main;

	# Gzip
	# Enable Gzip compression.
	gzip on;

	# Disable Gzip on IE6.
	gzip_disable "msie6";

	# Allow proxies to cache both compressed and regular version of file.
	# Avoids clients that don't support Gzip outputting gibberish.
	gzip_vary on;

	# Compress data, even when the client connects through a proxy.
	gzip_proxied any;

	# The level of compression to apply to files. A higher compression level increases
	# CPU usage. Level 5 is a happy medium resulting in roughly 75% compression.
	gzip_comp_level 6;

	# The minimum HTTP version of a request to perform compression.
	gzip_http_version 1.1;

	gzip_buffers 16 8k;

	# Don't compress files smaller than 256 bytes, as size reduction will be negligible.
	gzip_min_length 256;

	# Compress the following MIME types.
	gzip_types
	    application/atom+xml
	    application/javascript
	    application/json
	    application/ld+json
	    application/manifest+json
	    application/rss+xml
	    application/vnd.geo+json
	    application/vnd.ms-fontobject
	    application/x-font-ttf
	    application/x-web-app-manifest+json
	    application/xhtml+xml
	    application/xml
	    font/opentype
	    image/bmp
	    image/svg+xml
	    image/x-icon
	    text/cache-manifest
	    text/css
	    text/plain
	    text/vcard
	    text/vnd.rim.location.xloc
	    text/vtt
	    text/x-component
	    text/x-cross-domain-policy;
	  # text/html is always compressed when enabled.

    # Modules
    include /etc/nginx/conf.d/*;
    include /etc/nginx/sites-enabled/*;
}

#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
